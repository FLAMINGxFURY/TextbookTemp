#!markdown

<span style="font-size:16px;">
<h1 style="font-family:Copperplate">Lists</h1>
<code>Lists</code>, like <code>arrays</code>, store multiple instances of the same type of object. Unlike arrays, lists are one-dimensional structures that can grow and shrink at need.
</span>

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Creating a New List</h4>
Lists are declared differently than arrays. Here is the code to declare a list:
</span>
<br /><br />

>```csharp
>List<int> listOfIntegers = new List<int>();
>```

<span style="font-size:16px;">
This code uses angle brackets (<code><></code>) to specify the type of item that <code>listOfIntegers</code> contains. Similarly, angle brackets are used with the List class constructor and the <code>new</code> keyword to create an empty list of integers and to assign this object to the list. <br /><br />
Lists can also be initialized with values, like arrays:
</span>
<br /><br />

>```csharp
>List<int> listOfIntegers = new List<int>() { 1, 2, 3 };
>```

<span style="font-size:16px;">
Below are some more examples:
</span>

#!csharp

//An empty list of strings
List<string> listOfStrings = new List<string>();

//A list of doubles initialized with values
List<double> listOfDoubles = new List<double>() { 1.1, 2.2, 3.3 };

//An array of integers
int[] arrayOfInts = new int[] { 1, 2, 3 };

//Use the array to create a new list of integers
List<int> listOfInts = new List<int>(arrayOfInts);

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">List Properties and Methods</h4>
The C# documentation for Lists can be found <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.-ctor?view=net-6.0">here</a>. The class’s methods include some that are similar or identical to that of arrays. The examples below cover <code>Add()</code>, <code>Insert()</code>, <code>Remove()</code>, and <code>RemoveAt()</code>.
</span>

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Adding Values to a List</h4>
List's <code>Add()</code> method appends a value to the end of a list. Alternatively, <code>Insert()</code> inserts a value before a user-specified index, or throws an error if this index is <i>out of bounds</i>. The following examples demonstrate both methods:
</span>

#!csharp

List<string> listOfStrings = new List<string>() { "one", "two", "three" };

Console.WriteLine(string.Join(", ", listOfStrings));

//Append values to the end of the list
listOfStrings.Add("four");
listOfStrings.Add("five");

Console.WriteLine(string.Join(", ", listOfStrings));

//Insert "apple" at index 2
listOfStrings.Insert(2, "apple");

Console.WriteLine(string.Join(", ", listOfStrings));

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Removing Values from a List</h4>
List’s <code>Remove()</code> method removes a list’s first instance of a specified value if the list contains that value. Alternatively, <code>RemoveAt()</code> removes a value at a specified index, or throw an error if the index is <i>out of bounds</i>. The following examples demonstrate both methods:
</span>

#!csharp

List<int> listOfInts = new List<int>() { 1, 2, 7, 6, 9 };

Console.WriteLine(string.Join(", ", listOfInts));

//Remove 2 from the list
listOfInts.Remove(2);

Console.WriteLine(string.Join(", ", listOfInts));

//Try to remove 10 from the list
listOfInts.Remove(10);

Console.WriteLine(string.Join(", ", listOfInts));

//Remove the value at index 1
listOfInts.RemoveAt(1);

Console.WriteLine(string.Join(", ", listOfInts));

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Out of Bounds Errors</h4>
The following examples show the use of Try/Catch blocks to catch and print out-of-bounds index errors generated by <code>Insert()</code> and <code>RemoveAt()</code>.
</span>

#!csharp

//The list to operate on
List<char> listOfChars = new List<char>() { 'b', 'o', 'u', 'n', 'd', 's' };

#!csharp

//Try to insert "a" at index -1
try {
    listOfChars.Insert(-1, 'a');
}
catch (ArgumentOutOfRangeException) {
    Console.WriteLine("Cannot insert at negative index");
}

#!csharp

//Try to remove from index 14
try {
    listOfChars.RemoveAt(14);
}
catch (ArgumentOutOfRangeException) {
    Console.WriteLine("Remove index out of bounds");
}

#!markdown

<span style="font-size:16px;">
In the previous example, what would result from executing the statement <code>listOfChars.RemoveAt(14);</code> outside of a <code>try/catch</code> block, rather than from within it?
</span>

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Lists in Memory</h4>
As it does for arrays, C# stores each list in a contiguous block of memory. This block is allocated when a list is created. It grows and shrinks as a list changes size, and is repositioned when something else in memory prevents it from expanding. <br /><br />
What programmers must do to manage size changes in data structures depends on the language in use and possibly its libraries. In managed languages like C#, the language’s runtime system manages allocation and deallocation automatically and transparently: no further work is needed. In unmanaged languages like C and C++, memory allocation must be managed outside the runtime system. In C, programmers must allocate and deallocate memory themselves, At need. In C++, while programmers can adopt a “do-it-yourself” approach to memory management, the preferred approach is to rely on the language’s standard library. See, for example, Scott Meyers’ books on effective C++ programming for more on the importance of using the C++ standard library to manage memory. 
</span>

#!markdown

<hr /><span style="font-size:14px;">
<b style="font-size:16px;">Exercises</b> &emsp;|&emsp; <i>Place your answers in a <b>new</b> markdown cell below.</i>
<ol>
<li> What does the following code do?

```csharp
List<char> letters = new List<char>();
```

</li> 
<li>Use the following list for the exercises below: <kbd>list = [9, 3, 5, 1, 2, 4, 7, 6, 8]</kbd><br />
What does the list look like after the following code executes?

```csharp
list.Add(27);
```

</li>
<li> What does the list look like after the following code executes?

```csharp
list.Insert(3, 99);
```

</li>
<li> What does the list look like after the following code executes?

```csharp
list.Remove(3);
```

</li>
<li> What does the list look like after the following code executes?

```csharp
list.Remove(10);
```

</li>
<li> What does the list look like after the following code executes?

```csharp
list.RemoveAt(2);
```

</li>
<li> What does the list look like after the following code executes?

```csharp
list.RemoveAt(14);
```

</li>
<li> Give some examples of builtin <code>List</code> methods in C#. What does each of them do?
</li>
</span>
