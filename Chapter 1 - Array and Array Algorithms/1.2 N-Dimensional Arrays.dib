#!markdown

<span style="font-size:16px;">
<h1 style="font-family:Copperplate"><i>n</i>-Dimensional Arrays</h1>
<code>Arrays</code> are not restricted to one dimension. They are commonly used to represent grids in two dimensions, and can have any number of dimensions.
</span>

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Multidimensional Arrays</h4>
<code>Multidimensional Arrays</code> in C# fill the dimensions provided at declaration. The following array has the dimensions <code>[2,3]</code>:
<br />

<img src="https://raw.githubusercontent.com/FLAMINGxFURY/TextbookTemp/main/Chapter%201%20-%20Array%20and%20Array%20Algorithms/Assets/csharp-2d-array-index.webp" style="width:90%;background:rgba(255,255,255,1);" /> <br /><a href="https://www.programiz.com/csharp-programming/multidimensional-arrays" style="font-size:11px;">Source: Programiz.com</a>
</span>

#!markdown

<span style='font-size:16px'>
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Declaring Multidimensional Arrays</h4>
In C#, multidimensional arrays are declared using a comma (<code>,</code>) in the brackets:
</span>
<br /><br />

>```csharp
>int[,] arrInts2D;
>int[,,] arrints3D;
>```

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Initializing Multidimensional Arrays</h4>
When initializing multidimensional arrays, <b>each dimension of each subarray must be filled with a value.</b> For example, the following code will throw an error:
</span>

#!csharp

int[,] arrInts2D = {{1, 2}, {3, 4, 5}};

#!csharp

int[,,] arrInts3D = {{{1, 2}, {3, 4, 5}},{{6,7,8}, {9, 10, 11}}};

#!markdown

<span style='font-size:16px'>
This code is correct:</span>
<br /><br />

>```csharp
>int[,] arrInts2D = {{0, 1, 2}, {3, 4, 5}};
>int[,,] arrInts3D = {{{0, 1, 2}, {3, 4, 5}}, {{6,7,8}, {9, 10, 11}}};
>```

<span style="font-size:16px;">
The <code>new</code> keyword can be used to specify the shape of multidimensional arrays. To do so, use a comma (<code>,</code>) to separate the array's dimensions:</span>
<br /><br />

>```csharp
>int[,] arrInts2D = new int[2,3];
>int[,] arrInts3D = new int[2,3,2];
>```

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Accessing Values in Multidimensional Arrays</h4>
Values in multidimensional arrays are indexed by dimension. For example, a 2-dimensional array will have 2 indices for each value, while a 5-dimensional array will have 5 indices for each value. Indices in index expressions are ordered from left to right, in descending order of dimension.  For example, in a three-dimensional array, an elementâ€™s plane is shown first, followed by its row, and, finally, its column.</br></br>Consider the following 3-Dimensional array:<br /><br />
<table>
<tbody>
  <tr>
    <td style="border:0px;vertical-align:top;">[</td>
    <td style="border:0px;">
      <table>
      <tbody>
        <tr>
          <td>5</td>
          <td>4</td>
          <td>3</td>
          <td>2</td>
        </tr>
        <tr>
          <td>2</td>
          <td>1</td>
          <td>8</td>
          <td>7</td>
        </tr>
        <tr>
          <td>6</td>
          <td style="background-color:rgba(255,255,255,0.1)"><code>0</code></td>
          <td>7</td>
          <td>8</td>
        </tr>
      </tbody>
      </table>
    </td>
    <td style="border:0px;vertical-align:center;">,</td>
    <td style="border:0px;">
      <table>
      <tbody>
        <tr>
          <td>1</td>
          <td>4</td>
          <td>7</td>
          <td>2</td>
        </tr>
        <tr>
          <td>8</td>
          <td>2</td>
          <td>5</td>
          <td>3</td>
        </tr>
        <tr>
          <td>9</td>
          <td>3</td>
          <td>6</td>
          <td>4</td>
        </tr>
      </tbody>
      </table>
    </td>
    <td style="border:0px;vertical-align:bottom;">]</td>
  </tr>
</tbody>
</table><br />
The following code will access the highlighted zero:</span>
<br /><br />

>```csharp
>array[0,2,1];
>```

<span style="font-size:16px;">
<code>0</code> because the highlighted value is in the first plane. <br />
<code>2</code> because the highlighted value is in the third row. <br />
<code>1</code> because the highlighted value is in the second column.
</span>

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Properties and Methods for Multidimensional Arrays</h4>
Multidimensional arrays share functions with the base Array class. For simplicity, many functions treat all arrays as one-dimensional objects. For example, the <code>Length</code> property returns the total number of values in the entire array.</br></br>
Some Array methods are specific to multidimensional arrays. A couple C# examples are <code>GetLength()</code> and the <code>Rank</code> property. Be sure to reference the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.array?view=net-6.0">documentation</a> for the language you are using.

</span>

#!csharp

// The following code produces a 2x2 grid representing a chess board
int numRows = 8;
int numCols = 8;
char[,] chess = new char[numRows, numCols];

char[] backRowChessPieces = {'R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'};

// In normal arrays, we use the Length property for iteration.
// Multidimensional arrays have a funtion GetLength(x) where x is the dimension: 
// in this case, GetLength(0) gives us the y axis, and GetLength(1) gives us the x axis.

for(int thisRow= 0; thisRow < chess.GetLength(0); thisRow++) {       //for each row in the board
    //case 1: we are in a piece row
    if(thisRow == 0 || thisRow == chess.GetLength(0) - 1) {
        for(int thisCol = 0; thisCol < chess.GetLength(1); thisCol++) {
            chess[thisRow, thisCol] = backRowChessPieces[thisCol];
        }
    }
    
    //case 2: we are in a pawn row
    else if(thisRow == 1 || thisRow == chess.GetLength(0) - 2) {
        for(int thisCol = 0; thisCol < chess.GetLength(1); thisCol++) {
            chess[thisRow, thisCol] = 'p';
        }
    }

    //case 3: we are in an empty row
    else {
        for(int thisCol = 0; thisCol < chess.GetLength(1); thisCol++) {
            chess[thisRow, thisCol] = '.';
        }
    }
}

// This code prints the board to the screen
for(int i = 0; i < chess.GetLength(0); i++) {       //for each row in the board
    for (int j = 0; j < chess.GetLength(1); j++){   //for each column in the row
        Console.Write($"{chess[i,j]} ");            //write the character
    }
    Console.Write("\n");                            //insert a newline
}

#!markdown

<span style="font-size:15px;">

>ðŸ’¡**Challenge:** In the following <code>code</code> cell, show a chessboard from black's perspective. It may help to use the <code>chess</code> array or the <code>backRowChessPieces</code> array.

</span>

#!csharp

// Hint: From black's perspective, the queen will be on the right of the king.

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Jagged Arrays</h4>
<code>Jagged Arrays</code> are multi-dimensional arrays whose dimensions contain different numbers of elements. The following example shows a jagged array with four rows, each of which has a different size:
<br />

<img src="https://raw.githubusercontent.com/FLAMINGxFURY/TextbookTemp/main/Chapter%201%20-%20Array%20and%20Array%20Algorithms/Assets/JagArr.jpg" style="width:90%;" /><br /><a href="https://www.geeksforgeeks.org/jagged-array-or-array-of-arrays-in-c-with-examples/" style="font-size:11px;">Source: GeeksForGeeks</a>
</span>

#!markdown

<span style="font-size:16px;">
It may help to think of jagged arrays as arrays of arrays.<br />
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Declaring Jagged Arrays</h4>
Jagged arrays are declared using sequences of <code>[]</code> operators, one per dimension, like so:</span>
<br /><br />

>```csharp
>int[][] jagInts2D;
>```

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Initializing Jagged Arrays</h4>
Jagged arrays can be initialized in steps - and must be to achieve a jagged shape. The following code mimics the shape of the diagram above: </span>

#!csharp

int[][] jagInts2D = new int[4][];

jagInts2D[0] = new int[3];
jagInts2D[1] = new int[2];
jagInts2D[2] = new int[5];
jagInts2D[3] = new int[1];

//.NET Interactive will print something for us when used at the end of a code block like so:
jagInts2D

#!markdown

<span style="font-size:16px;">
Jagged arrays must be initialized with the <code>new</code> keyword. However, an array's deepest layer may be initialized with <code>{}</code>. For example, the above example can be rewritten as follows:</span>

#!csharp

int[][] jagInts2D = new int[4][];
 
jagInts2D[0] = new int[] {0, 1, 2};
jagInts2D[1] = new int[] {6, 4};
jagInts2D[2] = new int[] {1, 7, 6, 8, 9};
jagInts2D[3] = new int[] {5};

jagInts2D

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Accessing Values in Jagged Arrays</h4>
Like multidimensional arrays, jagged arrays are indexed based on dimension, following the same paradigm as declaration. The following code will access the 7 in <code>jagInts2D</code>:</span>
<br /><br />

>```csharp
>jagInts2D[2][1];
>```

<span style="font-size:16px;">
Like multidimensional arrays, jagged arrays can have any number of dimensions. The example below creates and manipulates a 3-dimensional jagged array.
</span>

#!csharp

//starting array
int[][][] arr = new int[4][][];

int valueInsert = 0;

for(int i = 0; i < arr.Length; i++) {   //for each plane
    arr[i] = new int[i + 1][];          //create an increasingly large plane of rows
    for(int j = 0; j < arr[i].Length; j++) {    //for each row
        arr[i][j] = new int[j + 1];     //create an increasingly large row of values
        for(int x = 0; x < arr[i][j].Length; x++) { //for each value
            arr[i][j][x] = valueInsert; //insert a value
            valueInsert++;              //increment that value
        }
    }
}

//print the array
for(int i = 0; i < arr.Length; i++) {   //for each plane
    Console.WriteLine($"Plane {i}");
    for(int j = 0; j < arr[i].Length; j++) {    //for each row
        for(int x = 0; x < arr[i][j].Length; x++) { //for each value
            Console.Write($"{arr[i][j][x]} ");
        }
        Console.Write("\n");
    }
    Console.Write("\n");
}

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Mixed Implementations</h4>
multidimensional arrays and jagged arrays can be mixed however you like. Below is a jagged multidimensional array:
</span>

#!csharp

// This effectively represents a 3-dimensional staircase of empty values
int[,][] mdJagged = {{new int[1], new int[2]},{new int[1], new int[2]}};

//print the array
for(int i = 0; i < mdJagged.GetLength(0); i++) {   //for each plane
    Console.WriteLine($"Plane {i}");
    for(int j = 0; j < mdJagged.GetLength(1); j++) {    //for each row
        for(int x = 0; x < mdJagged[i,j].Length; x++) { //for each value
            Console.Write($"{mdJagged[i,j][x]} ");
        }
        Console.Write("\n");
    }
    Console.Write("\n");
}

#!markdown

<span style="font-size:16px;">
The following shows a jagged array of multidimensional arrays:
</span>

#!csharp

int[][,] jaggedMD = new int[3][,]; 

//In this loop, we will create planes that increase in dimensions continuously
for(int i = 0; i < jaggedMD.Length; i++) { //for each plane
    jaggedMD[i] = new int[i+1, i+1];
}

//print the array
for(int i = 0; i < jaggedMD.Length; i++) {   //for each plane
    Console.WriteLine($"Plane {i}");
    for(int j = 0; j < jaggedMD[i].GetLength(0); j++) {    //for each row
        for(int x = 0; x < jaggedMD[i].GetLength(1); x++) { //for each value
            Console.Write($"{jaggedMD[i][j,x]} ");
        }
        Console.Write("\n");
    }
    Console.Write("\n");
}

#!markdown

<hr /><span style="font-size:14px;">
<b style="font-size:16px;">Exercises</b> &emsp;|&emsp; <i>Solve the exercises in the provided </i><code>code</code><i> cells.</i> <br /><br />
1. Create an array and fill it with the first 7 numbers of the Fibonacci Sequence, starting with <kbd>0</kbd>.
</span>

#!csharp

// Exercise 1

#!markdown

<span style="font-size:14px;">2. Using the array created in exercise 1, print the value <kbd>3</kbd> to the screen.</span>

#!csharp

// Exercise 2
// Hint: The array from exercise 1 will stay in memory until the notebook is closed.
// You should be able to use it here without redeclaring it, as long as you have 
// run the cell from exercise 1 first.

#!markdown

<span style="font-size:14px;">3. Reverse the above array, and then subtract 5 from each value.</span>

#!csharp

// Exercise 3

#!markdown

<span style="font-size:14px;">4. Create a multidimensional array to represent a Tic-Tac-Toe board.</span>

#!csharp

// Exercise 4

#!markdown

<span style="font-size:14px;">5. Initialize the values in the array to spaces. If you wish, you can combine 4 and 5 into one step.</span>

#!csharp

// Exercise 5

#!markdown

<span style="font-size:14px;">6. Place a few 'X's and 'O's on the board, and then print the array.</span>

#!csharp

// Exercise 6

#!markdown

<span style="font-size:14px;">7. Create a jagged array with 6 rows.</span>

#!csharp

// Exercise 7

#!markdown

<span style="font-size:14px;">8. Using a fresh copy of the array from exercise 1, set the sizes of the jagged array's rows to the Fibonacci Sequence: for example, this arrayâ€™s first and last rows should have 1 and 8 elements, respectively. Fill each row to capacity with the initial values of the Fibonacci sequence: for example, this arrayâ€™s third row should have {1, 1, 2} as its elements, while its fifth should have {1, 1, 2, 3. 5}. Finally, then print the array.</span>

#!csharp

// Copy your solution to exercise 1 below:

// Exercise 8
