#!markdown

<span style="font-size:16px;">
<h1 style="font-family:Copperplate">Searching and Sorting</h1>
A key operation when working with an array is finding one of its items by value. Chapter 1.1 showcases the <code>Array.IndexOf()</code> method, which will tell you <i>if</i> a value is in the array, and <i>where</i> in the array it is. To see how this works, first, run the code block below so that we have an array to start with.
</span>

#!csharp

// The following block of code will read in the array from a file

using System.IO;

int[] inputArray = new int[30];

using(var reader = new StreamReader(@"./Assets/inputArray.txt")) {
    for (int i = 0; i < 30; i++) {
        var line = reader.ReadLine();
        inputArray[i] = int.Parse(line);
    }
}

#!markdown

<span style="font-size:16px;">
The simplest way to search an array is to check each value, and go to the next if we don't find a match. Below is code to mimic <code>Array.IndexOf()</code>. Try it for yourself!
</span>

#!csharp

// Run this code block before trying to use FindIndex()

int FindIndex(int[] arrayToIndex, int find) {
    int index = -1;     //The method will return -1 if it doesn't find an index.
    
    for(int i = 0; i < arrayToIndex.Length; i++) {
        if(arrayToIndex[i] == find) {   //we found a match!
            index = i;
            break;                      //stop searching
        }
    }

    return index;
}

#!csharp

Console.WriteLine($"The value was found at:\t {FindIndex(inputArray, 409)}");
Console.WriteLine($"Using IndexOf():\t\t {Array.IndexOf(inputArray, 409)}");

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Time and Space Complexity</h4>
Searching is one of the first algorithms you learn in computer science. Algorithms are commonly characterized using two metrics. One, <b>Time Complexity</b> measures how many operations an algorithm might need to complete in relation to the size of its input. The other, <b>Space Complexity</b> measures how much memory an algorithm might use during its runtime.<br /><br />
Consider the <code>FindIndex()</code> method above. <br /><br />
<i>How many operations will it take to complete?</i> Assuming the worst case, we will need to examine each of an array's elements. This assertion is denoted using Big-O notation, as follows:</span> 
<br /><br />

>$O(n)$

<span style="font-size:16px;">
where <i>n</i> is the length of the input.<br /><br />
<i>How much memory will it use?</i> The answer to this question is more definite. The method uses two variables: the return variable <code>index</code>, and the loop variable <code>i</code>. Using Big-O notation, this assertion is denoted as follows:</span>
<br /><br />

>$O(2)$

<span style="font-size:16px;"> <br /><br />
You can learn more about time complexity in this <a href="https://www.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">chapter</a> from Khan Academy, and more about Big-O notation in this <a href="https://www.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">section</a> of that chapter. <br />

<img src="https://raw.githubusercontent.com/FLAMINGxFURY/TextbookTemp/main/Chapter%201%20-%20Array%20and%20Array%20Algorithms/Assets/timecomplexity.jpg" style="width:90%;" /> <br /><a href="https://www.bigocheatsheet.com/" style="font-size:11px;">Source: Big-O Cheat Sheet</a>
</span>

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Sorting</h4>
Sometimes, you will need to write code that orders the items in your array. In C#, you can do this with the <code>Array.sort()</code> method.
</span>

#!csharp

// Make a copy of the same length
int[] sortedArray = new int[inputArray.Length];
inputArray.CopyTo(sortedArray, 0);

// Sort the array
Array.Sort(sortedArray);

Console.WriteLine(String.Join(", ", inputArray));
Console.WriteLine(String.Join(", ", sortedArray));

#!markdown

<span style="font-size:16px;">
Sorting an array takes more operations than searching an array. In general, this is because the proper position of each of an array’s values depends on the values of all other elements in the array. The following code is an example of <b>Bubble Sort</b>, one of the simplest sorting algorithms. <br /><br />
In Bubble Sort, the first value in the array is compared to the next value. The greater of the two is moved forward and compared to the next value, until the end of the array is reached. In this way, the greatest value eventually "bubbles up" to the top of the array. The greatest value is stored at the end of the array, and the algorithm starts from the beginning, ignoring that last value.
</span>

#!csharp

void bubbleSort(int[] arrayToSort){
    
    for (int i = 0; i < arrayToSort.Length - 1; i++) {          // for each pair of values in the array (hence the -1)
        for (int j = 0; j < arrayToSort.Length - i - 1; j++) {  // for each pair in the array, minus solved values
            if (arrayToSort[j] > arrayToSort[j + 1]) {  // if the value is greater than the next value, move it forward
                int temp = arrayToSort[j];              // temp is required for the swap here so that 
                arrayToSort[j] = arrayToSort[j + 1];    // a value isn't overwritten
                arrayToSort[j + 1] = temp;
            }
        }
    }
}

#!csharp

// Make a copy of the same length
int[] bubbleArray = new int[inputArray.Length];
inputArray.CopyTo(bubbleArray, 0);

// Sort the array
bubbleSort(bubbleArray);

Console.WriteLine($"Original:\t\t{String.Join(", ", inputArray)}");
// this line assumes that you have run the sorting block above; if you haven't, it will throw an error.
Console.WriteLine($"Array.Sort():\t{String.Join(", ", sortedArray)}");
Console.WriteLine($"Bubble Sort:\t{String.Join(", ", bubbleArray)}");

#!markdown

<span style="font-size:16px;">
<i>What is the worst case scenario for Bubble Sort?</i> In bubble sort, we iterate over <code>arrayToSort.Length - 1</code> and <code>arrayToSort.Length - i - 1</code>. We can characterize BubbleSort's time complexity as follows:
</span>
<br /><br />

>$O(n^2)$

<span style="font-size:16px;">
because we iterate over the array for each value in the array. The fact that the second value (<code>arrayToSort.Length - i - 1</code>) shrinks as the algorithm continues is negligible for large datasets.<br /><br />
This <a href="https://visualgo.net/en/sorting">visual tool</a> demonstrates a few different sorting algorithms. Bubble Sort is there, as well as Quick Sort and Merge Sort, which we will discuss later.
</span>

#!markdown

<span style="font-size:16px;">
<h4 style="font-family:Copperplate;margin-bottom:6pt;">Making Sorts and Searches Faster</h4>
The simple approaches in this chapter can be incredibly slow when applied to large datasets. Run the following 3 code blocks, and note the runtime difference between the builtin sort and Bubble Sort.
</span>

#!csharp

// The following block of code will read in the array from a file

using System.IO;

int[] bigArray = new int[50000];

using(var reader = new StreamReader(@"./Assets/bigArray.txt")) {
    for (int i = 0; i < 50000; i++) {
        var line = reader.ReadLine();
        bigArray[i] = int.Parse(line);
    }
}

// Create the arrays to sort
int[] bigSorted = new int[bigArray.Length];
bigArray.CopyTo(bigSorted, 0);

int[] bigBubble = new int[bigArray.Length];
bigArray.CopyTo(bigBubble, 0);

#!csharp

#!time
bubbleSort(bigBubble);

#!csharp

#!time
Array.Sort(bigSorted);

#!markdown

<span style="font-size:16px;">
<code>Array.Sort()</code> is much faster than Bubble Sort. Depending on your machine, the difference may be more or less pronounced. Running the algorithms again may also produce anomalous results if your machine caches the operations. <br />

C# uses <b>Quick Sort</b>, a divide-and-conquer algorithm, for <code>Array.Sort()</code>. Here is what Quick Sort does:</span>

1. It selects an element in the array. This can be either a random or a predetermined element: e.g., the array's first or last element. This is called the <code>pivot</code>.
2. It iterates over the rest of the array, placing values less than the <code>pivot</code> to the left of it, and values greater to the right. 
3. It repeats steps 1 and 2 for both subarrays to the left and right of the pivot, until the subarrays are of size 1.
4. At that point, the array is sorted.

<span style="font-size:16px;">
The <i>average</i> time complexity for this algorithm is</span>
<br /><br />

>$O(nlog(n))$

<span style="font-size:16px;">
<i>n</i> because of the first pass over the array. <i>log(n)</i> because each pivot will split the array roughly in half.<br /><br />
The <i>worst</i> case for Quick Sort is actually</span>
<br /><br />

>$O(n^2)$

<span style="font-size:16px;">
because there is a chance that <b>EVERY</b> pivot will be either the lowest or highest value in the array. However, in practice, this rarely occurs. This, for example, will happen when the pivot is the array's first element <b>AND</b> the array is already sorted; QuickSort will place no values in the left subarray since the pivot will be the array's smallest value.
</span>

#!markdown

<span style="font-size:16px;">
Like sorts, searches can also be optimized using a divide-and-conquer method. <code>Array.BinarySearch()</code> is one of these. Binary Search expects a <b>sorted</b> input. Based on the fact that an array is sorted, it does the following:
</span>

1. Start at the middle value of the array. If this value is the requested value, stop here.
2. If the middle value is greater than the requested value, check the array’s left (lesser) half. If it is less, check the right (greater) half.
3. Repeat steps 1 and 2 until you find the value.

<span style="font-size:16px;">
This splits the problem into smaller parts, and results in a time complexity of:
</span>
<br /><br />

>$O(log(n))$

<span style="font-size:16px;">
You can test this in the example below.
</span>

#!csharp

// The following block of code will read in the array from a file

using System.IO;

int[] ordered = new int[250000];

using(var reader = new StreamReader(@"./Assets/ordered.txt")) {
    for (int i = 0; i < 250000; i++) {
        var line = reader.ReadLine();
        ordered[i] = int.Parse(line);
    }
}

#!csharp

#!time
FindIndex(ordered, 779726)

#!csharp

#!time
Array.BinarySearch(ordered, 779726)

#!markdown

<hr /><span style="font-size:14px;">
<b style="font-size:16px;">Exercises</b> &emsp;|&emsp; <i>Place your answers in a <b>new</b> markdown cell below.</i>
<ol>
<li> Explain what the following code accomplishes.

```csharp
foreach (int x in array) {
    Console.Write($"{x} ");
}
```

</li> 
<li> Explain what the following code accomplishes.

```csharp
for(int i = 0; i < array.Length; i++) {
    array[i] *= 2;
}
```

</li> 
<li> Explain what the following code accomplishes.

```csharp
int[][] arr = new int[4][];
int[] lengths = {4, 2, 5, 7};

for(int i = 0; i < arr.Length; i++) {
    arr[i] = new int[lengths[i]];
}
```

</li> 
<li> Explain what the following code accomplishes.

```csharp
using(var reader = new StreamReader(@"./file.txt")) {
    for (int i = 0; i < array.Length; i++) {
        var line = reader.ReadLine();
        array[i] = int.Parse(line);
    }
}
```

</li> 
<li> Explain what the following code accomplishes.

```csharp
int index = -1;
    
for(int i = 0; i < array.Length; i++) {
    if(array[i] == 3) {
        index = i;
        break;
    }
}
```

</li> 
<li> Explain what the following code accomplishes.

```csharp
for (int i = 0; i < array.Length - 1; i++) {
    for (int j = 0; j < array.Length - i - 1; j++) {
        if (array[j] > array[j + 1]) {
            int temp = array[j];
            array[j] = array[j + 1];
            array[j + 1] = temp;
        }
    }
}
```

</li> 
</span>
